#include<stdlib.h>

//Defining the pins for the Nokia 5110 LCD
//Reset and DC
#define N5110_RST       PA1
#define N5110_DC        PA4
//SPI
#define N5110_CS        PA0
#define N5110_DIN        PA7
#define N5110_CLK        PA5


//Nokia 5110-related libraries
#include "math.h"
#include "N5110_SPI.h"
#if USESPI==1
#include <SPI.h>
#endif
N5110_SPI lcd(N5110_RST, N5110_CS, N5110_DC, N5110_DIN, N5110_CLK); // RST,CS,DC,DIN,CLK
#include "c64enh_font.h" //smaller font
#include "small4x7_font.h" //smaller font
#include "small5x6_font.h" //smaller font

// --------------------------------------------------------------------------




//Defining pins
const int RotaryCLK = PB9; //CLK pin on the rotary encoder
const int RotaryDT = PB8; //DT pin on the rotary encoder
const int RotarySW = PB7; //SW pin on the rotary encoder (Button function)
const int UpButton = PB5; //Up button which is also a start button
const int DownButton = PB4; //Down button which is also a stop button

//Statuses of the DT and CLK pins on the encoder
int CLKNow;
int CLKPrevious;
int DTNow;
int DTPrevious;

char buf[25], buf2[15];

int numT = 0;
int curT = 0;
float bufT[300];
int graphStart = 0;

char *menuTxt[] = {"MCU ", "VCC/Battery", "Clock", "Backlight", "Contrast", "EEPROM dump", "Graph", "Help", "LN"};
int numMenus = 0;
int menuLine;
int menuStart;
int numScrLines = 6;
int menuMode = -1; // -1 -> menu of options, 0..n -> option
int oldPos = 0;


// --------------------------------------------------------------------------
// -------------------------
volatile int encoderPos = 0;

void buttonInt() {}


int readButton()
{
  static int lastState = HIGH;
  int val = 0, state = digitalRead(RotarySW);
  if (state == LOW && lastState == HIGH) val = 1;
  lastState = state;
  return val;
}

void readEncoderInt(); // Forward declaration

void initEncoder()
{
  encoderPos = 0;
  pinMode(RotaryCLK, INPUT_PULLUP); // encoderPinA is the CLK pin
  pinMode(RotaryDT, INPUT_PULLUP);  // encoderPinB is the DT pin
  pinMode(RotarySW, INPUT_PULLUP);  // encoderButton is the SW pin
  attachInterrupt(digitalPinToInterrupt(RotaryCLK), readEncoderInt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(RotarySW), buttonInt, CHANGE);
}

// simple pixel based drawing functions
#define PIXEL_OFF 0
#define PIXEL_ON  1
#define PIXEL_XOR 2

byte scr[84 * 4]; // frame buffer
byte scrWd = 84;
byte scrHt = 4;



//Timing related variables, act mainly as debouncing
float RotaryTime1; //Rotary encoder timing
float RotaryTime2; //Rotary button timing
unsigned long ButtonTime1; //UP/DOWN Button timing


//Menu-related variables
//Values
int RotaryButtonValue; //Pressed or not pressed rotary switch
volatile int menuCounter = 0; //this is used for counting inside the main menu (menu item number)

int blinkTimer = 0; //timer for blinking the LED on the microcontroller
bool blinkStatus = false;


//char buf[15]; //buffer for printing on the LCD (strings) holds 25 characters 
char str_temp[7]; //for printing floats

char emptyStr[] = "            ";  // Mutable 12 char


//setup() function
void printLCD(); //Prints a "welcome screen"
void handleMenu(); //Menu handling function
void formatMenu(char *in, char *out, int num); //Formats the menu items
void clrBuf(); //Clears the buffer
void drawPixel(int16_t x, int16_t y, uint16_t c); //Draws a pixel
void drawLineV(int16_t x, int16_t y0, int16_t y1, uint16_t c); //Draws a vertical line
void buttonInt(); //Interrupt for the button
void readEncoderInt(); //Interrupt for the rotary encoder
void initEncoder(); //Initializes the rotary encoder
void showHelp(); //Shows the help screen
void showln(); //Shows the lnelectronics screen
void setMenu(int m); //Sets the menu
void endMenu(); //Ends the menu
void drawMenuSlider(); //Draws the menu slider
//void readButton(); //Reads the button


//programming via ST-LINK: Press BOOT button and hold it, press RST and release it, release BOOT.
void setup()
{
  //Definition of the pins
  //Rotary encoder
  pinMode(RotaryCLK, INPUT); //CLK
  pinMode(RotaryDT, INPUT); //DT
  pinMode(RotarySW, INPUT); //SW
  //Buttons
  pinMode(PB5, INPUT); //UP
  pinMode(PB4, INPUT); //DOWN
  pinMode(PC13, OUTPUT); //MCU onboard LED  

  //Store states of the encoder pins
  CLKPrevious = digitalRead(RotaryCLK);
  DTPrevious = digitalRead(RotaryDT);

  initEncoder();

  //Rotary encoder interrupt for the CLK pin
  //attachInterrupt(digitalPinToInterrupt(RotaryCLK), RotaryEncoder, CHANGE); 

  lcd.init();
  lcd.clrScr();
  initEncoder();

  //Starting up the Nokia 5110 LCD
 /*  lcd.init(); //initialize LCD  
  delay(300);   
  lcd.clrScr(); //clear the whole display
  delay(300);   
  lcd.setContrast(57); 
  lcd.setBias(4); 
  lcd.displayMode(PCD8544_DISPLAYNORMAL);
  delay(300);   
  lcd.setFont(Small4x7PL);//set the font */
  //printLCD(); //print the welcome message 

  Serial.begin(9600); //All serial communication can be turned off if it is not needed

  //This is a "startup blinking" to indicate that the MCU works properly - you can remove it
//   for(int i = 0; i < 10; i++)
//   {
//       digitalWrite(PC13, HIGH);   
//       delay(100);              
//       digitalWrite(PC13, LOW);    
//       delay(100);               
//   }    
}

void printLCD() //Prints a "welcome screen"
{
  //int8_t width = (int8_t)pgm_read_byte(&c64enh[0]);  
  //lcd.printStr(ALIGN_CENTER, 0, "Coil Windig");
  lcd.setFont(Small4x7PL);
  lcd.printStr(ALIGN_CENTER, 0,"Coil Windig");  
  lcd.printStr(ALIGN_CENTER, 1, "BY : LN");  
  lcd.printStr(ALIGN_CENTER, 3, emptyStr);
  lcd.printStr(ALIGN_CENTER, 4, emptyStr);
  lcd.printStr(ALIGN_CENTER, 5, "Version 1.2.2");//Version number
}

void loop()
{
  //blink the onboard LED on the MCU every 1 s -> it indicates that the loop() works - you can remove it
  if(millis() - blinkTimer > 1000)
  {
      digitalWrite(PC13, blinkStatus);
      blinkStatus = !blinkStatus;
      blinkTimer = millis();
  }

  handleMenu(); //Menu handling function
}
  


void showHelp()
{
  lcd.setFont(c64enh);
  lcd.printStr(ALIGN_CENTER, 0, "Help");
  lcd.setFont(Small4x7PL);
  lcd.setCR(1);
  lcd.printStr(0, 1, "Use encoder to select menu item. Press button to exit.");
  lcd.setCR(0);
}

void showln()
{
  lcd.setFont(c64enh);
  lcd.printStr(ALIGN_CENTER, 0, "Lnelectronics");
  lcd.setFont(Small4x7PL);
  lcd.setCR(1);
  lcd.printStr(0, 1, "Use encoder to select menu lnelectronic. Press button to exit.");
  lcd.setCR(0);
}

void setMenu(int m)
{
  menuMode = m;
  lcd.clrScr();
  oldPos = encoderPos;
  encoderPos = 0;
}

void endMenu()
{
  if (readButton() > 0) {
    menuMode = -1;
    lcd.clrScr();
    encoderPos = oldPos;
  }
}

void drawMenuSlider()
{
  int n = (8 * numScrLines - 2 - 5 - 2) * menuLine / (numMenus - 1);
  scrWd = 3;
  scrHt = numScrLines;
  clrBuf();
  drawLineV(1, 0, numScrLines*8-1, 1);
  drawLineV(0, n+2, n+2+4, 1);
  drawLineV(2, n+2, n+2+4, 1);
  lcd.drawBuf(scr, 81, 0, scrWd, scrHt);
}


 
void clrBuf()
{
  for (int i = 0; i < scrWd * scrHt; i++) scr[i] = 0;
}

void drawPixel(int16_t x, int16_t y, uint16_t c)
{
  if ((x < 0) || (x >= scrWd) || (y < 0) || (y >= scrHt * 8)) return;
  switch (c) {
    case PIXEL_OFF: scr[x + (y / 8)*scrWd] &= ~(1 << (y & 7)); break;
    case PIXEL_ON:  scr[x + (y / 8)*scrWd] |=  (1 << (y & 7)); break;
    case PIXEL_XOR: scr[x + (y / 8)*scrWd] ^=  (1 << (y & 7)); break;
  }
}

void drawLineV(int16_t x, int16_t y0, int16_t y1, uint16_t c)
{
  if (y1 > y0) for (int y = y0; y <= y1; y++) drawPixel(x, y, c);
  else         for (int y = y1; y <= y0; y++) drawPixel(x, y, c);
}

// --------------------------------------------------------------------------



void readEncoderInt()
{
  (digitalRead(RotaryCLK) == digitalRead(RotaryDT)) ? encoderPos++ : encoderPos--;
}

void formatMenu(char *in, char *out, int num)
{
  int j = strlen(in);
  out[0] = ' ';
  strncpy(out + 1, in, j++);
  for (; j < num; j++) out[j] = ' ';
  out[j] = 0;
}



void handleMenu()
{
  //lcd.setFont(Small5x7PL);
  lcd.setFont(Small5x6PL);
  lcd.setCharMinWd(5);
  lcd.setDigitMinWd(5);
  if (encoderPos < 0) encoderPos = 0;
  if (menuMode == -1) {
    menuLine = encoderPos / 2;
    if (menuLine >= numMenus) {
      menuLine = numMenus - 1;
      encoderPos = menuLine * 2;
    }
    if (menuLine >= menuStart + numScrLines) menuStart = menuLine - numScrLines + 1;
    if (menuLine < menuStart) menuStart = menuLine;
    for (int i = 0; i < numScrLines; i++) {
      if (i + menuStart < numMenus) {
        lcd.setInvert(i + menuStart == menuLine ? 1 : 0);
        formatMenu(menuTxt[i + menuStart], buf, 13);
        lcd.printStr(ALIGN_LEFT, i, buf);
      }
    }
    drawMenuSlider();
    if (readButton()) {
      setMenu(menuLine);
      if (menuLine == 3) encoderPos = 84; // setBacklight
      if (menuLine == 4) encoderPos = 0x30 / 2; // setContrast
    }
  } else 
  if (menuMode == 0) { showHelp(); endMenu(); } else
  if (menuMode == 1) { showln(); endMenu(); } else
  /* if (menuMode == 2) { showClock(1); endMenu(); } else
  if (menuMode == 3) { setBacklight(); endMenu(); } else
  if (menuMode == 4) { setContrast(); endMenu(); } else
  if (menuMode == 5) { dumpEEPROM(); endMenu(); } else
  if (menuMode == 6) { drawSin(); endMenu(); } else
  if (menuMode == 7) { showHelp(); endMenu(); } else
  if (menuMode == 8) { reboot(); endMenu(); } else */
  {  menuMode = -1; lcd.clrScr(); }
}